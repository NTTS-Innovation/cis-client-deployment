{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "appNamePrefix": {
            "type": "string",
            "defaultValue": "nttsctd",
            "metadata": {
                "description": "The name prefix to use for stack resources."
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "centralus",
            "metadata": {
                "description": "Provide a location for the Blob Storage account that supports Event Grid."
            }
        },
        "processingRegion": {
            "type": "string",
            "defaultValue": "default",
            "allowedValues": [
                "default",
                "northeurope",
                "eastus2"
            ],
            "metadata": {
                "description": "Select the destination region for processing."
            }
        },
        "eventSubName": {
            "type": "string",
            "defaultValue": "subToStorage",
            "metadata": {
                "description": "Provide a name for the Event Grid subscription."
            }
        },
        "endpoint": {
            "type": "string",
            "defaultValue": "https://p-gcs-ctd.azure-api.net",
            "metadata": {
                "description": "Provide the URL for the WebHook to receive events."
            }
        },
        "apiKey": {
            "type": "string",
            "metadata": {
                "description": "API Key for the Registration"
            }
        },
        "utcNow": {
            "type": "string",
            "defaultValue": "[utcNow()]",
            "metadata": {
                "description": "UTC Timestamp used to Generate GUID"
            }
        },
        "DeploymentScriptGitBranch": {
            "type": "string",
            "defaultValue": "f/eventgrid",
            "metadata": {
                "description": "Branch to us for enrollment script"
            }
        }
    },
    "variables": {
        "endpoint": "[concat(parameters('endpoint'),'/ctd/events')]",
        "manualregiondeployments": ["australiasoutheast"],
        "registrationEndpoint": "[concat(parameters('endpoint'),'/ctd/enrollment')]",
        "enrollmentId": "[guid(subscription().subscriptionId, guid(resourceGroup().id, parameters('location')))]",
        "storageAccountName": "[concat(parameters('appNamePrefix'), take(guid(resourceGroup().id, parameters('location'), parameters('utcNow')),8))]",
        "storageAccountid": "[concat(resourceGroup().id,'/providers/','Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
        "systemTopicName": "[concat(parameters('appNamePrefix'),'-',parameters('location'),'-','flowlogs')]",
        "NTTAzurePostUserIdentity": "[concat(resourceGroup().name,'-',parameters('location'),'-','NTTAzurePostUserIdentity')]",
        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
        "roleDefinitionName": "[guid(resourceGroup().id, parameters('location'), parameters('utcNow'))]",
        "contributorRoleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
        "deploymentScriptName": "[concat(parameters('appNamePrefix'), '-', parameters('location'), '-','autoregistration')]",
        "deploymentScriptGitUrl": "[concat('https://raw.githubusercontent.com/NTTS-Innovation/cis-client-deployment/', parameters('DeploymentScriptGitBranch'),'/scripts/client_activation.ps')]",
        "singleQuote": "'"
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[variables('storageAccountName')]",
            "kind": "StorageV2",
            "apiVersion": "2019-04-01",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Standard_LRS"
            },
            "properties": {
                "accountType": "Standard_LRS"
            }
        },
        {
            "type": "Microsoft.EventGrid/systemTopics",
            "apiVersion": "2020-04-01-preview",
            "name": "[variables('systemTopicName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[variables('storageAccountName')]"
            ],
            "properties": {
                "source": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
                "topicType": "Microsoft.Storage.StorageAccounts"
            }
        },
        {
            "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
            "name": "[variables('NTTAzurePostUserIdentity')]",
            "apiVersion": "2018-11-30",
            "location": "[parameters('location')]"
        },
        {
            "apiVersion": "2020-04-01-preview",
            "type": "Microsoft.Authorization/roleAssignments",
            "name": "[variables('roleDefinitionName')]",
            "dependsOn": [
                "[variables('NTTAzurePostUserIdentity')]"
            ],
            "properties": {
                "roleDefinitionId": "[variables('contributorRoleDefinitionId')]",
                "principalId": "[reference(variables('NTTAzurePostUserIdentity')).principalId]",
                "scope": "[resourceGroup().id]",
                "principalType": "ServicePrincipal"
            }
        },
        {
            "type": "Microsoft.Resources/deploymentScripts",
            "condition": "[not(contains(variables('manualregiondeployments'), parameters('location')))]",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentScriptName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[variables('NTTAzurePostUserIdentity')]",
                "[variables('roleDefinitionName')]"
            ],
            "kind": "AzurePowerShell",
            "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                    "[resourceID('Microsoft.ManagedIdentity/userAssignedIdentities/',variables('NTTAzurePostUserIdentity'))]": {}
                }
            },
            "properties": {
                "forceUpdateTag": 1,
                "azPowerShellVersion": "3.0",
                "environmentVariables": [
                    {
                        "name": "SubscriptionId",
                        "value": "[subscription().subscriptionId]"
                    },
                    {
                        "name": "ResourceGroup",
                        "value": "[resourceGroup().name]"
                    },
                    {
                        "name": "Region",
                        "value": "[parameters('location')]"
                    },
                    {
                        "name": "ProcessingRegion",
                        "value": "[parameters('processingRegion')]"
                    },
                    {
                        "name": "DeploymentName",
                        "value": "[deployment().name]"
                    },
                    {
                        "name": "DeploymentTime",
                        "value": "[parameters('utcNow')]"
                    },
                    {
                        "name": "EndPoint",
                        "value": "[variables('registrationEndpoint')]"
                    },
                    {
                        "name": "ApiKey",
                        "value": "[parameters('ApiKey')]"
                    },
                    {
                        "name": "EnrollmentId",
                        "value": "[variables('enrollmentId')]"
                    },
                    {
                        "name": "StorageAccountKey",
                        "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(resourceId(resourceGroup().name,'Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-04-01').keys[0].value,';EndpointSuffix=core.windows.net')]"
                    }
                ],
                "containerSettings": {
                    "containerGroupName": "nttfunctioncontainer"
                },
                "storageAccountSettings": {
                    "storageAccountName": "[variables('storageAccountName')]",
                    "storageAccountKey": "[listKeys(variables('storageAccountId'), '2019-04-01').keys[0].value]"
                },
                "scriptContent": "
                    $headers = @{'Ocp-Apim-Subscription-Key'=$Env:ApiKey;
                    'processing_region'=$Env:ProcessingRegion;
                    'enrollment_id'=$Env:EnrollmentId;
                    'region'=$Env:Region;
                    }

                    $body = @{'subscription_id'=$Env:SubscriptionId;
                    'resource_group'=$Env:ResourceGroup;
                    'region'=$Env:Region;
                    'storage_account_key'=$Env:StorageAccountKey;
                    'processing_region'=$Env:ProcessingRegion;
                    'deployment_name'=$Env:DeploymentName;
                    'deployment_time'=$Env:DeploymentTime;
                    'enrollment_id'=$Env:EnrollmentId;
                    }

                    $ErrorActionPreference = 'Stop'
                    $DeploymentScriptOutputs = @{}


                    $Response = Invoke-WebRequest -Uri $Env:EndPoint -Method POST -Body ($body|ConvertTo-Json) -ContentType 'application/json' -Headers $headers -ErrorAction Stop

                    if ($Response.statuscode -gt 202)
                    {
                    throw 'Registration failed, status code: $Response.statuscode, url: $Env:EndPoint with key: $Env:ApiKey'
                    }

                    $ClientAPI = ($Response.content|ConvertFrom-Json)
                    Write-Output $ClientAPI.event_grid_api_key
                    $DeploymentScriptOutputs = @{}
                    $DeploymentScriptOutputs['ApiKey'] = $ClientAPI.event_grid_api_key
                ",
                "timeout": "PT30M",
                "cleanupPreference": "OnSuccess",
                "retentionInterval": "P1D"
            }
        },
        {
            "type": "Microsoft.EventGrid/systemTopics/eventSubscriptions",
            "condition": "[not(contains(variables('manualregiondeployments'), parameters('location')))]",
            "apiVersion": "2020-04-01-preview",
            "name": "[concat(variables('systemTopicName'), '/', parameters('eventSubName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.EventGrid/systemTopics', variables('systemTopicName'))]",
                "[variables('deploymentScriptName')]"
            ],
            "properties": {
                "destination": {
                    "properties": {
                        "endpointUrl": "[concat(variables('endpoint'),'?','enrollment_id=',variables('enrollmentId'),'&','subscription_key=', reference(variables('deploymentScriptName')).outputs.ApiKey)]"
                    },
                    "endpointType": "WebHook"
                },
                "filter": {
                    "includedEventTypes": [
                        "Microsoft.Storage.BlobCreated"
                    ]
                }
            }
        }
    ],
    "outputs": {
        "RegistrationString": {
            "type": "string",
            "value": "[concat('curl ',
             '-H \"Content-Type: application/json\"', 
             ' -H \"Ocp-Apim-Subscription-Key\"=',
             parameters('ApiKey'),
             ' -H \"processing_region\"=',
             parameters('processingRegion'),
             ' -H \"enrollment_id\"=',
             variables('enrollmentId'),
             ' -H \"region\"=',
             parameters('location'),
             ' --request POST',
             ' --data',
            variables('singleQuote'),
            '{',
            '\"subscription_id\"=',
            subscription().subscriptionId,
            ',',
            '\"resource_group\"=',
            resourceGroup().name,
            ',',
            '\"region\"=',
            parameters('location'),
            ',',
            '\"storage_account_key\"=',
            'DefaultEndpointsProtocol=https;AccountName=', 
            variables('storageAccountName'), 
            ';AccountKey=', 
            listKeys(resourceId(resourceGroup().name, 'Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-04-01').keys[0].value,
            ';EndpointSuffix=core.windows.net',
            ',',
            '\"processing_region\"=',
            parameters('processingRegion'),
            ',',
            '\"deployment_name\"=',
            deployment().name,
            ',',
            '\"deployment_time\"=',
            parameters('utcNow'),
            ',',
            '\"enrollment_id\"=',
            variables('enrollmentId'),
            '}',
            variables('singleQuote'),
            ' ',
            variables('registrationEndpoint'))]"
        }

    }
}
