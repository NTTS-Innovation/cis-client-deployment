$params = @{"subscription_id"=$Env:SubscriptionId;
  "resource_group"=$Env:ResourceGroup;
  "region"=$Env:Region;
  "deployment_time"=$Env:DeploymentTime;
  "storage_account_key"=$Env:StorageAccountKey;
 # "eventhub_namespace"=$Env:eventhubNameSpace;
 # "eventhub_name"=$Env:EventHubName;
 # "eventhub_policy_name"=$Env:EventHubPolicyName;
 # "consumer_group_name"=$Env:EventHubConsumerGroup;
 # "primary_key"=$Env:EventHubPrimaryKey;
}

Write-Output ($params|ConvertTo-Json)

$ErrorActionPreference = 'Stop'
$DeploymentScriptOutputs = @{}


$Response = Invoke-WebRequest -Uri $Env:EndPoint -Method POST -Body ($params|ConvertTo-Json) -ContentType "application/json" -Headers @{ 'x-functions-key' =  $Env:ApiKey } -ErrorAction Stop
Write-Output $Response.statuscode


if ($Response.statuscode -gt 202)
{
  throw 'Registration failed, status code: $Response.statuscode, url: $Env:EndPoint with key: $Env:ApiKey'
}
else {
  Write-Output 'Registration succeeded, status code: $Response.statuscode, url: $Env:EndPoint with key: $Env:ApiKey'
}